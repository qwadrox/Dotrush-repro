/*
 * Product Inventory API
 *
 * API for managing product inventory
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using ProductInventoryApi.Attributes;
using ProductInventoryApi.Models;

namespace ProductInventoryApi.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public abstract class ProductsApiController : ControllerBase
    { 
        /// <summary>
        /// Create a new product
        /// </summary>
        /// <param name="productCreate"></param>
        /// <response code="201">Product created</response>
        /// <response code="400">Invalid input</response>
        [HttpPost]
        [Route("/api/v1/products")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("CreateProduct")]
        [SwaggerResponse(statusCode: 201, type: typeof(Product), description: "Product created")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Invalid input")]
        public abstract IActionResult CreateProduct([FromBody]ProductCreate productCreate);

        /// <summary>
        /// Delete a product
        /// </summary>
        /// <param name="productId">ID of the product</param>
        /// <response code="204">Product deleted</response>
        /// <response code="404">Product not found</response>
        [HttpDelete]
        [Route("/api/v1/products/{productId}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteProduct")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Product not found")]
        public abstract IActionResult DeleteProduct([FromRoute (Name = "productId")][Required]string productId);

        /// <summary>
        /// Get product by ID
        /// </summary>
        /// <param name="productId">ID of the product</param>
        /// <response code="200">Product found</response>
        /// <response code="404">Product not found</response>
        [HttpGet]
        [Route("/api/v1/products/{productId}")]
        [ValidateModelState]
        [SwaggerOperation("GetProductById")]
        [SwaggerResponse(statusCode: 200, type: typeof(Product), description: "Product found")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Product not found")]
        public abstract IActionResult GetProductById([FromRoute (Name = "productId")][Required]string productId);

        /// <summary>
        /// Get all products
        /// </summary>
        /// <param name="category">Filter products by category</param>
        /// <param name="limit">Maximum number of items to return</param>
        /// <response code="200">List of products</response>
        [HttpGet]
        [Route("/api/v1/products")]
        [ValidateModelState]
        [SwaggerOperation("GetProducts")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Product>), description: "List of products")]
        public abstract IActionResult GetProducts([FromQuery (Name = "category")]string? category, [FromQuery (Name = "limit")][Range(1, 100)]int? limit);

        /// <summary>
        /// Update a product
        /// </summary>
        /// <param name="productId">ID of the product</param>
        /// <param name="productUpdate"></param>
        /// <response code="200">Product updated</response>
        /// <response code="400">Invalid input</response>
        /// <response code="404">Product not found</response>
        [HttpPut]
        [Route("/api/v1/products/{productId}")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("UpdateProduct")]
        [SwaggerResponse(statusCode: 200, type: typeof(Product), description: "Product updated")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Invalid input")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Product not found")]
        public abstract IActionResult UpdateProduct([FromRoute (Name = "productId")][Required]string productId, [FromBody]ProductUpdate productUpdate);
    }
}
