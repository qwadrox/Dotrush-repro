/*
 * Product Inventory API
 *
 * API for managing product inventory
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using ProductInventoryApi.Converters;

namespace ProductInventoryApi.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public class InventoryItem : IEquatable<InventoryItem>
    {
        /// <summary>
        /// Gets or Sets ProductId
        /// </summary>
        /* <example>123e4567-e89b-12d3-a456-426614174000</example> */
        [Required]
        [DataMember(Name="productId", EmitDefaultValue=true)]
        public Guid ProductId { get; set; }

        /// <summary>
        /// Gets or Sets Product
        /// </summary>
        [DataMember(Name="product", EmitDefaultValue=false)]
        public Product? Product { get; set; }

        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        /* <example>50</example> */
        [Required]
        [DataMember(Name="quantity", EmitDefaultValue=true)]
        public int Quantity { get; set; }

        /// <summary>
        /// Gets or Sets WarehouseLocation
        /// </summary>
        /* <example>Building A, Section 5, Shelf 3</example> */
        [Required]
        [DataMember(Name="warehouseLocation", EmitDefaultValue=false)]
        public string WarehouseLocation { get; set; }

        /// <summary>
        /// Gets or Sets LastUpdated
        /// </summary>
        [DataMember(Name="lastUpdated", EmitDefaultValue=true)]
        public DateTimeOffset? LastUpdated { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InventoryItem {\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  Product: ").Append(Product).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  WarehouseLocation: ").Append(WarehouseLocation).Append("\n");
            sb.Append("  LastUpdated: ").Append(LastUpdated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((InventoryItem)obj);
        }

        /// <summary>
        /// Returns true if InventoryItem instances are equal
        /// </summary>
        /// <param name="other">Instance of InventoryItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InventoryItem other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ProductId == other.ProductId ||
                    
                    ProductId.Equals(other.ProductId)
                ) && 
                (
                    Product == other.Product ||
                    Product != null &&
                    Product.Equals(other.Product)
                ) && 
                (
                    Quantity == other.Quantity ||
                    
                    Quantity.Equals(other.Quantity)
                ) && 
                (
                    WarehouseLocation == other.WarehouseLocation ||
                    WarehouseLocation != null &&
                    WarehouseLocation.Equals(other.WarehouseLocation)
                ) && 
                (
                    LastUpdated == other.LastUpdated ||
                    
                    LastUpdated.Equals(other.LastUpdated)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + ProductId.GetHashCode();
                    if (Product != null)
                    hashCode = hashCode * 59 + Product.GetHashCode();
                    
                    hashCode = hashCode * 59 + Quantity.GetHashCode();
                    if (WarehouseLocation != null)
                    hashCode = hashCode * 59 + WarehouseLocation.GetHashCode();
                    
                    hashCode = hashCode * 59 + LastUpdated.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(InventoryItem left, InventoryItem right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(InventoryItem left, InventoryItem right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
